// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  emailVerified DateTime?
  image         String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  stores        Store[]
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  notifications Notification[]
  apiKeys       ApiKey[]
  webhooks      Webhook[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Store Management
model Store {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  logo        String?
  banner      String?
  domain      String?  @unique
  isActive    Boolean  @default(true)
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Store owner
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  products     Product[]
  categories   Category[]
  orders       Order[]
  customers    Customer[]
  settings     StoreSettings?
  analytics    Analytics[]
  integrations Integration[]

  @@map("stores")
}

model StoreSettings {
  id                    String  @id @default(cuid())
  storeId               String  @unique
  currency              String  @default("USD")
  language              String  @default("en")
  timezone              String  @default("UTC")
  taxRate               Float   @default(0)
  shippingEnabled       Boolean @default(true)
  pickupEnabled         Boolean @default(false)
  whatsappEnabled       Boolean @default(false)
  whatsappNumber        String?
  emailNotifications    Boolean @default(true)
  smsNotifications      Boolean @default(false)
  autoOrderConfirmation Boolean @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("store_settings")
}

// Product Management
model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String
  description String?
  price       Float
  comparePrice Float?
  costPrice   Float?
  sku         String?
  barcode     String?
  weight      Float?
  dimensions  Json?
  images      String[]
  isActive    Boolean  @default(true)
  isFeatured  Boolean  @default(false)
  inventory   Int      @default(0)
  lowStockThreshold Int @default(5)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Store relation
  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // Category relations
  categories ProductCategory[]
  
  // Order relations
  orderItems OrderItem[]

  // Variant relations
  variants ProductVariant[]

  // Review relations
  reviews Review[]

  @@unique([storeId, slug])
  @@map("products")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String
  description String?
  image       String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Store relation
  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // Product relations
  products ProductCategory[]

  @@unique([storeId, slug])
  @@map("categories")
}

model ProductCategory {
  productId  String
  categoryId String

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("product_categories")
}

model ProductVariant {
  id        String   @id @default(cuid())
  name      String
  sku       String?
  price     Float?
  inventory Int      @default(0)
  attributes Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Product relation
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Order relations
  orderItems OrderItem[]

  @@map("product_variants")
}

// Customer Management
model Customer {
  id        String   @id @default(cuid())
  email     String
  name      String?
  phone     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Store relation
  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // Relations
  orders       Order[]
  addresses    Address[]
  reviews      Review[]

  @@unique([storeId, email])
  @@map("customers")
}

// Order Management
model Order {
  id            String        @id @default(cuid())
  orderNumber   String        @unique
  status        OrderStatus   @default(PENDING)
  total         Float
  subtotal      Float
  tax           Float         @default(0)
  shipping      Float         @default(0)
  discount      Float         @default(0)
  currency      String        @default("USD")
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  storeId   String
  store     Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)
  
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Order details
  items      OrderItem[]
  payments   Payment[]
  shipments  Shipment[]
  addresses  OrderAddress[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  total     Float
  createdAt DateTime @default(now())

  // Relations
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  @@map("order_items")
}

model OrderAddress {
  id        String   @id @default(cuid())
  type      AddressType
  name      String
  email     String
  phone     String?
  address   String
  city      String
  state     String
  country   String
  zipCode   String?
  createdAt DateTime @default(now())

  // Order relation
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_addresses")
}

// Payment Management
model Payment {
  id            String        @id @default(cuid())
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  method        PaymentMethod
  transactionId String?
  gateway       String?
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Order relation
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// Shipping Management
model Shipment {
  id            String         @id @default(cuid())
  trackingNumber String?
  carrier       String?
  status        ShipmentStatus @default(PENDING)
  shippedAt     DateTime?
  deliveredAt   DateTime?
  metadata      Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Order relation
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipments")
}

// Address Management
model Address {
  id        String       @id @default(cuid())
  type      AddressType
  name      String
  email     String
  phone     String?
  address   String
  city      String
  state     String
  country   String
  zipCode   String?
  isDefault Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relations
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// Review System
model Review {
  id        String   @id @default(cuid())
  rating    Int
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  @@map("reviews")
}

// Analytics
model Analytics {
  id        String   @id @default(cuid())
  type      String
  data      Json
  date      DateTime
  createdAt DateTime @default(now())

  // Store relation
  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("analytics")
}

// Integrations
model Integration {
  id        String   @id @default(cuid())
  type      String
  name      String
  config    Json
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Store relation
  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

// API Management
model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  permissions Json
  isActive  Boolean  @default(true)
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User relation
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("api_keys")
}

// Webhooks
model Webhook {
  id        String   @id @default(cuid())
  url       String
  events    String[]
  secret    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User relation
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("webhooks")
}

// Notifications
model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // User relation
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PAYPAL
  STRIPE
  CASH
  OTHER
}

enum ShipmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  FAILED
  RETURNED
}

enum AddressType {
  BILLING
  SHIPPING
  BOTH
} 